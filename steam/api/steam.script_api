- name: steam
  type: table
  desc: Functions and constants for interacting Steamworks

  members:
  - name: init
    type: function
    desc: Initialize Steamworks. 
    returns:
    - name: success
      type: Boolean
      desc: True if successful
    - name: message
      type: String
      desc: Error message if unsuccessful.

  - name: update
    type: function
    desc: Update Steamworks. Call this from a script component.

  - name: restart
    type: function
    desc: Restart Steamworks. 
    parameters:
    - name: appid
      type: number


  - name: finalize
    type: function
    desc: Finalize Steamworks. 

  - name: ELeaderboardDataRequestGlobal
    type: number
    desc: Requests rows in the leaderboard from the full table 

  - name: ELeaderboardDataRequestGlobalAroundUser
    type: number
    desc: Requests rows in the leaderboard from rows around the user 

  - name: ELeaderboardDataRequestFriends
    type: number
    desc: Requests all the rows for friends of the current user 

  - name: ELeaderboardSortMethodAscending
    type: number
    desc: Top-score is lowest number 

  - name: ELeaderboardSortMethodNone
    type: number
    desc: Top-score is highest number 

  - name: ELeaderboardUploadScoreMethodKeepBest
    type: number
    desc: Leaderboard will keep user&#x27;s best score 

  - name: ELeaderboardUploadScoreMethodForceUpdate
    type: number
    desc: Leaderboard will always replace score with specified 

  - name: ELeaderboardDisplayTypeNumeric
    type: number
    desc: Simple numerical score 

  - name: ELeaderboardDisplayTypeTimeSeconds
    type: number
    desc: The score represents a time, in seconds 

  - name: ELeaderboardDisplayTypeTimeMilliSeconds
    type: number
    desc: The score represents a time, in milliseconds 

  - name: EOverlayToStoreFlag_None
    type: number
    desc: Passed as parameter to the store 

  - name: EOverlayToStoreFlag_AddToCart
    type: number
    desc: Passed as parameter to the store 

  - name: EOverlayToStoreFlag_AddToCartAndShow
    type: number
    desc: Passed as parameter to the store 

  - name: EActivateGameOverlayToWebPageMode_Default
    type: number
    desc: Passed as parameter to ActivateGameOverlayToWebPage 

  - name: EActivateGameOverlayToWebPageMode_Modal
    type: number
    desc: Passed as parameter to ActivateGameOverlayToWebPage 

  - name: EPersonaStateOffline
    type: number
    desc: Friend is not currently logged on 

  - name: EPersonaStateOnline
    type: number
    desc: Friend is logged on 

  - name: EPersonaStateBusy
    type: number
    desc: User is on, but busy 

  - name: EPersonaStateAway
    type: number
    desc: Auto-away feature 

  - name: EPersonaStateSnooze
    type: number
    desc: Auto-away for a long time 

  - name: EPersonaStateLookingToTrade
    type: number
    desc: Online, trading 

  - name: EPersonaStateLookingToPlay
    type: number
    desc: Online, wanting to play 

  - name: EPersonaStateInvisible
    type: number
    desc: Online, but appears offline to friends.  This status is never published to clients. 

  - name: apps_is_dlc_installed
    type: function
    desc: Takes AppID of DLC and checks if the user owns the DLC &amp; if the DLC is installed. 
    parameters:
    - name: app_id
      type: number

    returns:
    - name: installed
      type: bool


  - name: friends_get_friend_persona_name
    type: function
    desc: Returns the name of another user. Same rules as GetFriendPersonaState() apply as to whether or not the user knowns the name of the other user note that on first joining a lobby, chat room or game server the local user will not known the name of the other users automatically; that information will arrive asyncronously.
    parameters:
    - name: CSteamID
      type: friendId

    returns:
    - name: String
      type: name
      desc: Name of user

  - name: friends_get_persona_name
    type: function
    desc: Returns the local players name - guaranteed to not be NULL. This is the same name as on the users community profile page. This is stored in UTF-8 format.
    returns:
    - name: String
      type: name
      desc: Name of user

  - name: friends_get_persona_state
    type: function
    desc: Gets the status of the current user. Returned as EPersonaState.
    returns:
    - name: Number
      type: state
      desc: Status of user.

  - name: friends_get_friend_persona_state
    type: function
    desc: Returns the current status of the specified user. This will only be known by the local user if steamIDFriend is in their friends list; on the same game server; in a chat room or lobby; or in a small group with the local user.
    parameters:
    - name: steamIDFriend
      type: number
      desc: Id of friend
    returns:
    - name: Number
      type: state
      desc: State of friend

  - name: friends_get_friend_steam_level
    type: function
    desc: Get friends steam level. 
    parameters:
    - name: steamIDFriend
      type: number
      desc: Id of friend
    returns:
    - name: Number
      type: level
      desc: Steam level of friend

  - name: friends_get_friend_relationship
    type: function
    desc: Returns a relationship to a user. 
    parameters:
    - name: steamIDFriend
      type: number
      desc: Id of friend
    returns:
    - name: Number
      type: relationship
      desc: Relationship to the user.

  - name: friends_activate_game_overlay_to_store
    type: function
    desc: Activates game overlay to store page for app. 
    parameters:
    - name: app_id
      type: number

    - name: flag
      type: number
      desc: EOverlayToStoreFlag

  - name: friends_activate_game_overlay_to_web_page
    type: function
    desc: Activates game overlay web browser directly to the specified URL. Full address with protocol type is required, e.g. http://www.steamgames.com/
    parameters:
    - name: url
      type: string

    - name: mode
      type: number
      desc: EActivateGameOverlayToWebPageMode

  - name: set_listener
    type: function
    desc: Set a listener. 
    parameters:
    - name: listener
      type: function
      desc: Listener function to call

  - name: user_get_steam_id
    type: function
    desc: Returns the CSteamID of the account currently logged into the Steam client. A CSteamID is a unique identifier for an account, and used to differentiate users in all parts of the Steamworks API.
    returns:
    - name: id
      type: CSteamID


  - name: user_get_player_steam_level
    type: function
    desc: Gets the Steam Level of the user, as shown on their profile. 
    returns:
    - name: level
      type: number


  - name: user_get_game_badge_level
    type: function
    desc: Trading Card badges data access. If you only have one set of cards, the series will be 1. The user has can have two different badges for a series; the regular (max level 5) and the foil (max level 1).
    returns:
    - name: series
      type: number

    - name: foil
      type: boolean


  - name: user_logged_on
    type: function
    desc: Returns true if the Steam client current has a live connection to the Steam Servers.
    returns:
    - name: logged_on
      type: boolean


  - name: user_is_behind_nat
    type: function
    desc: Returns true if this users looks like they are behind a NAT device. Only valid once the user has connected to steam .
    returns:
    - name: behind_nat
      type: boolean


  - name: user_is_phone_verified
    type: function
    desc: Gets whether the users phone number is verified. 
    returns:
    - name: verified
      type: boolean


  - name: user_is_phone_identifying
    type: function
    desc: Gets whether the users phone number is identifying. 
    returns:
    - name: verifying
      type: boolean


  - name: user_is_phone_requiring_verification
    type: function
    desc: Gets whether the users phone number is awaiting (re)verification. 
    returns:
    - name: verification
      type: boolean


  - name: user_is_two_factor_enabled
    type: function
    desc: Gets whether the user has two factor enabled on their account. 
    returns:
    - name: enabled
      type: boolean


  - name: user_stats_get_stat_int
    type: function
    desc: Get user stat as an integer. 
    parameters:
    - name: id
      type: string
      desc: Id of the stat to get
    returns:
    - name: Boolean
      type: ok

    - name: Number
      type: stat
      desc: The stat or nil

  - name: user_stats_set_stat_int
    type: function
    desc: Set user stat. 
    parameters:
    - name: id
      type: string
      desc: Id of the stat to set
    - name: stat
      type: number
      desc: Number to set
    returns:
    - name: ok
      type: boolean


  - name: user_stats_get_stat_float
    type: function
    desc: Get user stat as a floating point number. 
    parameters:
    - name: id
      type: string
      desc: Id of the stat to get
    returns:
    - name: ok
      type: Boolean

    - name: stat
      type: Number
      desc: The stat

  - name: user_stats_set_stat_float
    type: function
    desc: Set user stat. 
    parameters:
    - name: id
      type: string
      desc: Id of the stat to set
    - name: stat
      type: number
      desc: Number to set
    returns:
    - name: ok
      type: Boolean


  - name: user_stats_request_current_stats
    type: function
    desc: Ask the server to send down this user&#x27;s data and achievements for this game. 
    returns:
    - name: ok
      type: Boolean
      desc: True if successful

  - name: user_stats_request_global_stats
    type: function
    desc: Requests global stats data, which is available for stats marked as &quot;aggregated&quot;. This call is asynchronous, with the results returned in GlobalStatsReceived_t. nHistoryDays specifies how many days of day-by-day history to retrieve in addition to the overall totals. The limit is 60.
    parameters:
    - name: history_days
      type: number

    returns:
    - name: ok
      type: Boolean


  - name: user_stats_store_stats
    type: function
    desc: Store the current data on the server. Will get a callback when set and one callback for every new achievement  If the callback has a result of k_EResultInvalidParam, one or more stats uploaded has been rejected, either because they broke constraints or were out of date. In this case the server sends back updated values. The stats should be re-iterated to keep in sync.
    returns:
    - name: ok
      type: Boolean


  - name: user_stats_reset_all_stats
    type: function
    desc: Reset stats. 
    parameters:
    - name: achievements
      type: boolean
      desc: True if achievements should be reset as well.
    returns:
    - name: ok
      type: Boolean


  - name: user_stats_set_achievement
    type: function
    desc: Set achievement. 
    parameters:
    - name: name
      type: string

    returns:
    - name: ok
      type: Boolean


  - name: user_stats_get_achievement
    type: function
    desc: Get achievement. 
    parameters:
    - name: name
      type: string

    returns:
    - name: ok
      type: Boolean

    - name: achieved
      type: Boolean


  - name: user_stats_clear_achievement
    type: function
    desc: Clear achievement. 
    parameters:
    - name: name
      type: string

    returns:
    - name: ok
      type: Boolean


  - name: user_stats_get_num_achievements
    type: function
    desc: Used for iterating achievements. In general games should not need these functions because they should have a list of existing achievements compiled into them.
    returns:
    - name: num
      type: Number
      desc: Number of achievements.

  - name: user_stats_get_achievement_name
    type: function
    desc: Get achievement name iAchievement in [0,GetNumAchievements) 
    parameters:
    - name: index
      type: number

    returns:
    - name: name
      type: String


  - name: user_stats_get_achievement_display_attribute
    type: function
    desc: Get general attributes for an achievement. Accepts the following keys * &quot;name&quot; and &quot;desc&quot; for retrieving the localized achievement name and description (returned in UTF8) * &quot;hidden&quot; for retrieving if an achievement is hidden (returns &quot;0&quot; when not hidden, &quot;1&quot; when hidden)
    parameters:
    - name: name
      type: string

    - name: key
      type: string
      desc: Either &quot;name&quot;, &quot;desc&quot; or &quot;hidden&quot;
    returns:
    - name: attribute
      type: String


  - name: user_stats_get_achievement_achieved_percent
    type: function
    desc: Returns the percentage of users who have achieved the specified achievement. 
    returns:
    - name: ok
      type: Boolean

    - name: percent
      type: Number


  - name: user_stats_find_or_create_leaderboard
    type: function
    desc: Gets a leaderboard by name, it will create it if it&#x27;s not yet created. This call is asynchronous, with the result returned in a listener callback with event set to LeaderboardFindResult_t.
    parameters:
    - name: leaderboard_name
      type: string
      desc: The name of the leaderboard to find or create.
    - name: eLeaderboardSortMethod
      type: ELeaderboardSortMethod
      desc: The sort order of the new leaderboard if it&#x27;s created.
    - name: eLeaderboardDisplayType
      type: ELeaderboardDisplayType
      desc: The display type (used by the Steam Community web site) of the new leaderboard if it&#x27;s created.
    returns:
    - name: handle
      type: string


  - name: user_stats_get_leaderboard_name
    type: function
    desc: Get the name of a leaderboard. 
    parameters:
    - name: leaderboard
      type: string

    returns:
    - name: name
      type: string


  - name: user_stats_get_leaderboard_entry_count
    type: function
    desc: Get the total number of entries in a leaderboard, as of the last request. 
    parameters:
    - name: leaderboard
      type: string

    returns:
    - name: count
      type: number


  - name: user_stats_download_leaderboard_entries
    type: function
    desc: Asks the Steam back-end for a set of rows in the leaderboard. This call is asynchronous, with the result returned in a listener callback with event set to LeaderboardScoresDownloaded_t. LeaderboardScoresDownloaded_t will contain a handle to pull the results from GetDownloadedLeaderboardEntries(). You can ask for more entries than exist, and it will return as many as do exist. * k_ELeaderboardDataRequestGlobal requests rows in the leaderboard from the full table, with nRangeStart &amp; nRangeEnd in the range [1, TotalEntries] * k_ELeaderboardDataRequestGlobalAroundUser requests rows around the current user, nRangeStart being negate e.g. DownloadLeaderboardEntries( hLeaderboard, k_ELeaderboardDataRequestGlobalAroundUser, -3, 3 ) will return 7 rows, 3 before the user, 3 after * k_ELeaderboardDataRequestFriends requests all the rows for friends of the current user
    parameters:
    - name: leaderboard
      type: string

    - name: request
      type: ELeaderboardDataRequest

    - name: start
      type: number

    - name: end
      type: number

    returns:
    - name: handle
      type: string


  - name: user_stats_get_downloaded_leaderboard_entry
    type: function
    desc: Returns data about a single leaderboard entry 
    parameters:
    - name: hSteamLeaderboardEntries
      type: string
      desc: Leaderboard entries handle
    - name: index
      type: number
      desc: Which entry to get
    returns:
    - name: ok
      type: Boolean

    - name: entry
      type: Table
      desc: The requested leaderboard entry.

  - name: user_stats_upload_leaderboard_score
    type: function
    desc: Uploads a user score to a specified leaderboard. This call is asynchronous, with the result returned in a listener callback with event set to LeaderboardScoreUploaded_t.
    parameters:
    - name: leaderboard
      type: string

    - name: eLeaderboardUploadScoreMethod
      type: ELeaderboardUploadScoreMethod

    - name: nScore
      type: number

    returns:
    - name: handle
      type: string


  - name: utils_get_app_id
    type: function
    desc: Returns the appID of the current process. 
    returns:
    - name: app_id
      type: Number


  - name: utils_get_seconds_since_app_active
    type: function
    desc: Return the number of seconds since the user. 
    returns:
    - name: seconds
      type: Number


  - name: utils_is_steam_running_on_steam_deck
    type: function
    desc: Returns true if currently running on the Steam Deck device. 
    returns:
    - name: running_on_steamdeck
      type: Boolean


  - name: utils_get_image_size
    type: function
    desc: Get size of image 
    parameters:
    - name: image
      type: number
      desc: Image handle
    returns:
    - name: ok
      type: Boolean
      desc: True if size of image was read successfully
    - name: width
      type: Number
      desc: Image width or nil
    - name: height
      type: Number
      desc: Image height or nil

  - name: utils_get_image_rgba
    type: function
    desc: Get image in RGBA format. 
    parameters:
    - name: image
      type: number
      desc: Image handle
    - name: size
      type: number
      desc: Size of image
    returns:
    - name: ok
      type: Boolean
      desc: True if size of image was read successfully
    - name: Image
      type: String


  - name: utils_get_server_real_time
    type: function
    desc: Returns the Steam server time in Unix epoch format. (Number of seconds since Jan 1, 1970 UTC) 
    returns:
    - name: Server
      type: number
      desc: Time

  - name: utils_show_floating_gamepad_text_input
    type: function
    desc: Opens a floating keyboard over the game content and sends OS keyboard keys directly to the game. 
    parameters:
    - name: mode
      type: number
      desc: EFloatingGamepadTextInputMode
    - name: x
      type: number
      desc: Text field x position
    - name: y
      type: number
      desc: Text field y position
    - name: width
      type: number
      desc: Text field width
    - name: height
      type: number
      desc: Text field height
    returns:
    - name: result
      type: bool
      desc: True if the floating keyboard was shown, otherwise, false.

  - name: utils_show_gamepad_text_input
    type: function
    desc: Activates the Big Picture text input dialog which only supports gamepad input. 
    parameters:
    - name: input_mode
      type: number
      desc: EGamepadTextInputMode
    - name: line_input_mode
      type: number
      desc: EGamepadTextInputLineMode
    - name: description
      type: string
      desc: Sets the description that should inform the user what the input dialog is for
    - name: existing_text
      type: string
      desc: Sets the preexisting text which the user can edit.
    returns:
    - name: result
      type: bool
      desc: True if the big picture overlay is running; otherwise, false

