local rpg = require "gooey.themes.rpg.rpg"
local monarch = require "monarch.monarch"

local LEADERBOARD = [[
NAME: %s (order: %s)

ENTRIES (total: %d)
%s
]]

function init(self)
	msg.post(".", "acquire_input_focus")

	local status, error = pcall(steam.init)
	if not status then print("Error: " .. error) return end

	steam.set_listener(function(self, e, t)
		print("listener event", e)
		pprint(t)
		if e == "UserStatsReceived_t" then
			msg.post("#", "refresh_user_stats", t)
			msg.post("#", "refresh_user_achievements", t)
		elseif e == "GlobalStatsReceived_t" then
			msg.post("#", "refresh_global_stats", t)
		elseif e == "LeaderboardFindResult_t" then
			if not t.m_bLeaderboardFound then
				print("Unable to find leaderboard")
				return
			end
			local new_score = math.random(1, 100000)
			steam.user_stats_upload_leaderboard_score(t.m_hSteamLeaderboard, steam.ELeaderboardUploadScoreMethodForceUpdate, new_score)						
			steam.user_stats_download_leaderboard_entries(t.m_hSteamLeaderboard, steam.ELeaderboardDataRequestGlobal, 1, 10)
		elseif e == "LeaderboardScoresDownloaded_t" then
			msg.post("#", "refresh_leaderboard", t)
		end
	end)

	local user_id = steam.user_get_steam_id()
	--steam.user_stats_request_user_stats(user_id)
	steam.user_stats_request_current_stats()
	steam.user_stats_request_global_stats(7)
	steam.user_stats_find_leaderboard("Feet Traveled")
	--steam.user_stats_find_or_create_leaderboard("Meters Traveled", steam.ELeaderboardSortMethodAscending, steam.ELeaderboardDisplayTypeNumeric)		
end

function final(self)
	steam.final()
end

function update(self, dt)
	steam.update()
end

function on_input(self, action_id, action)
	rpg.button("back", action_id, action, function()
		monarch.back()
	end)
	rpg.button("num_games_add", action_id, action, function()
		local ok, num_games = steam.user_stats_get_stat_int("NumGames")
		if ok then
			steam.user_stats_set_stat_int("NumGames", num_games + 1)
			steam.user_stats_store_stats()
			msg.post("#", "refresh_user_stats")
			msg.post("#", "refresh_user_achievements")
		end
	end)
	rpg.button("feet_traveled_add", action_id, action, function()
		local ok, feet_traveled = steam.user_stats_get_stat_float("FeetTraveled")
		if ok then
			steam.user_stats_set_stat_float("FeetTraveled", feet_traveled + math.random(100,10000) / 100)
			steam.user_stats_store_stats()
			msg.post("#", "refresh_user_stats")
			msg.post("#", "refresh_user_achievements")
		end
	end)
	rpg.button("reset_stats", action_id, action, function()
		local ok = steam.user_stats_reset_all_stats(true)
		if ok then
			msg.post("#", "refresh_user_stats")
			msg.post("#", "refresh_user_achievements")
		end
	end)
	rpg.button("unlock_win_one", action_id, action, function()
		local ok = steam.user_stats_set_achievement("ACH_WIN_ONE_GAME")
		if ok then
			msg.post("#", "refresh_user_achievements")
		end
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("refresh_user_stats") then
		local ok, num_games = steam.user_stats_get_stat_int("NumGames")
		if ok then
			gui.set_text(gui.get_node("num_games"), ("Num Games: %d"):format(num_games))
		else
			gui.set_text(gui.get_node("num_games"), "Num Games: error")
		end

		local ok, feet_traveled = steam.user_stats_get_stat_float("FeetTraveled")
		if ok then
			gui.set_text(gui.get_node("feet_traveled"), ("Feet traveled: %.2f ft"):format(feet_traveled))
		else
			gui.set_text(gui.get_node("feet_traveled"), "Feet traveled: error")
		end
	elseif message_id == hash("refresh_user_achievements") then
		local achievement_count = steam.user_stats_get_num_achievements()
		local s = ""
		for i=0,achievement_count - 1 do
			local api_name = steam.user_stats_get_achievement_name(i)
			print(api_name)
			local ok, achieved = steam.user_stats_get_achievement(api_name)
			if ok then
				local name = steam.user_stats_get_achievement_display_attribute(api_name, "name")
				local ok, percent = steam.user_stats_get_achievement_achieved_percent(api_name)
				if ok then
					s = s .. ("%s (%.2f%%) %s\n"):format(name, percent, achieved and "UNLOCKED" or "LOCKED")
				end
			end
		end
		gui.set_text(gui.get_node("achievements"), s)
	elseif message_id == hash("refresh_leaderboard") then
		print("REFRESH LEADERBOARD")
		pprint(message)
		local leaderboard_id = message.m_hSteamLeaderboard

		local order = steam.user_stats_get_leaderboard_sort_method(message.m_hSteamLeaderboard)
		local order_name = "None"
		if order == steam.ELeaderboardSortMethodAscending then
			order_name = "Ascending"
		elseif order == steam.ELeaderboardSortMethodDescending then
			order_name = "Descending"
		end
		
		local name = steam.user_stats_get_leaderboard_name(leaderboard_id)
		local entry_count = message.m_cEntryCount
		local entries = {}
		for i=0,entry_count-1 do
			local ok, details, entry = steam.user_stats_get_downloaded_leaderboard_entry(message.m_hSteamLeaderboardEntries, i, 1)
			if ok then
				pprint(details)
				local name = steam.friends_get_friend_persona_name(details.m_steamIDUser)
				local s = ("#%d %s - %d"):format(details.m_nGlobalRank, name, details.m_nScore)
				table.insert(entries, s)
			else
				print("Unable to get leaderboard entry")
				pprint(message.m_hSteamLeaderboardEntries)
			end
		end
		local count = steam.user_stats_get_leaderboard_entry_count(leaderboard_id)
		local text = LEADERBOARD:format(name, order_name, count, table.concat(entries, "\n"))
		gui.set_text(gui.get_node("leaderboard"), text)
	end
end